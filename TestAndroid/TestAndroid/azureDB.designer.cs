#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestAndroid
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="myfestal_db")]
	public partial class azureDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCounty(County instance);
    partial void UpdateCounty(County instance);
    partial void DeleteCounty(County instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertEventType(EventType instance);
    partial void UpdateEventType(EventType instance);
    partial void DeleteEventType(EventType instance);
    partial void InsertFestivalType(FestivalType instance);
    partial void UpdateFestivalType(FestivalType instance);
    partial void DeleteFestivalType(FestivalType instance);
    partial void InsertTown(Town instance);
    partial void UpdateTown(Town instance);
    partial void DeleteTown(Town instance);
    partial void InsertFestival(Festival instance);
    partial void UpdateFestival(Festival instance);
    partial void DeleteFestival(Festival instance);
    #endregion
		
		public azureDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["myfestal_dbConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public azureDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public azureDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public azureDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public azureDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<County> Counties
		{
			get
			{
				return this.GetTable<County>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<EventType> EventTypes
		{
			get
			{
				return this.GetTable<EventType>();
			}
		}
		
		public System.Data.Linq.Table<FestivalType> FestivalTypes
		{
			get
			{
				return this.GetTable<FestivalType>();
			}
		}
		
		public System.Data.Linq.Table<Town> Towns
		{
			get
			{
				return this.GetTable<Town>();
			}
		}
		
		public System.Data.Linq.Table<Festival> Festivals
		{
			get
			{
				return this.GetTable<Festival>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Counties")]
	public partial class County : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Festival> _Festivals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public County()
		{
			this._Festivals = new EntitySet<Festival>(new Action<Festival>(this.attach_Festivals), new Action<Festival>(this.detach_Festivals));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="County_Festival", Storage="_Festivals", ThisKey="ID", OtherKey="FestivalCounty_ID")]
		public EntitySet<Festival> Festivals
		{
			get
			{
				return this._Festivals;
			}
			set
			{
				this._Festivals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Festivals(Festival entity)
		{
			this.SendPropertyChanging();
			entity.County = this;
		}
		
		private void detach_Festivals(Festival entity)
		{
			this.SendPropertyChanging();
			entity.County = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Events")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _FestivalID;
		
		private string _EventsName;
		
		private System.DateTime _EventsDate;
		
		private System.DateTime _StartTime;
		
		private System.DateTime _EndTime;
		
		private string _Location;
		
		private int _EType_ID;
		
		private string _EventLogo;
		
		private EntityRef<EventType> _EventType;
		
		private EntityRef<Festival> _Festival;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFestivalIDChanging(int value);
    partial void OnFestivalIDChanged();
    partial void OnEventsNameChanging(string value);
    partial void OnEventsNameChanged();
    partial void OnEventsDateChanging(System.DateTime value);
    partial void OnEventsDateChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.DateTime value);
    partial void OnEndTimeChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnEType_IDChanging(int value);
    partial void OnEType_IDChanged();
    partial void OnEventLogoChanging(string value);
    partial void OnEventLogoChanged();
    #endregion
		
		public Event()
		{
			this._EventType = default(EntityRef<EventType>);
			this._Festival = default(EntityRef<Festival>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FestivalID", DbType="Int NOT NULL")]
		public int FestivalID
		{
			get
			{
				return this._FestivalID;
			}
			set
			{
				if ((this._FestivalID != value))
				{
					if (this._Festival.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFestivalIDChanging(value);
					this.SendPropertyChanging();
					this._FestivalID = value;
					this.SendPropertyChanged("FestivalID");
					this.OnFestivalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventsName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EventsName
		{
			get
			{
				return this._EventsName;
			}
			set
			{
				if ((this._EventsName != value))
				{
					this.OnEventsNameChanging(value);
					this.SendPropertyChanging();
					this._EventsName = value;
					this.SendPropertyChanged("EventsName");
					this.OnEventsNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventsDate", DbType="DateTime NOT NULL")]
		public System.DateTime EventsDate
		{
			get
			{
				return this._EventsDate;
			}
			set
			{
				if ((this._EventsDate != value))
				{
					this.OnEventsDateChanging(value);
					this.SendPropertyChanging();
					this._EventsDate = value;
					this.SendPropertyChanged("EventsDate");
					this.OnEventsDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime NOT NULL")]
		public System.DateTime EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EType_ID", DbType="Int NOT NULL")]
		public int EType_ID
		{
			get
			{
				return this._EType_ID;
			}
			set
			{
				if ((this._EType_ID != value))
				{
					if (this._EventType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEType_IDChanging(value);
					this.SendPropertyChanging();
					this._EType_ID = value;
					this.SendPropertyChanged("EType_ID");
					this.OnEType_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventLogo", DbType="NVarChar(MAX)")]
		public string EventLogo
		{
			get
			{
				return this._EventLogo;
			}
			set
			{
				if ((this._EventLogo != value))
				{
					this.OnEventLogoChanging(value);
					this.SendPropertyChanging();
					this._EventLogo = value;
					this.SendPropertyChanged("EventLogo");
					this.OnEventLogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventType_Event", Storage="_EventType", ThisKey="EType_ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EventType EventType
		{
			get
			{
				return this._EventType.Entity;
			}
			set
			{
				EventType previousValue = this._EventType.Entity;
				if (((previousValue != value) 
							|| (this._EventType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventType.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._EventType.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._EType_ID = value.ID;
					}
					else
					{
						this._EType_ID = default(int);
					}
					this.SendPropertyChanged("EventType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Festival_Event", Storage="_Festival", ThisKey="FestivalID", OtherKey="FestivalId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Festival Festival
		{
			get
			{
				return this._Festival.Entity;
			}
			set
			{
				Festival previousValue = this._Festival.Entity;
				if (((previousValue != value) 
							|| (this._Festival.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Festival.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._Festival.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._FestivalID = value.FestivalId;
					}
					else
					{
						this._FestivalID = default(int);
					}
					this.SendPropertyChanged("Festival");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventTypes")]
	public partial class EventType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _EType;
		
		private EntitySet<Event> _Events;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnETypeChanging(string value);
    partial void OnETypeChanged();
    #endregion
		
		public EventType()
		{
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EType", DbType="NVarChar(MAX)")]
		public string EType
		{
			get
			{
				return this._EType;
			}
			set
			{
				if ((this._EType != value))
				{
					this.OnETypeChanging(value);
					this.SendPropertyChanging();
					this._EType = value;
					this.SendPropertyChanged("EType");
					this.OnETypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventType_Event", Storage="_Events", ThisKey="ID", OtherKey="EType_ID")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.EventType = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.EventType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FestivalTypes")]
	public partial class FestivalType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FType;
		
		private EntitySet<Festival> _Festivals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFTypeChanging(string value);
    partial void OnFTypeChanged();
    #endregion
		
		public FestivalType()
		{
			this._Festivals = new EntitySet<Festival>(new Action<Festival>(this.attach_Festivals), new Action<Festival>(this.detach_Festivals));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FType", DbType="NVarChar(MAX)")]
		public string FType
		{
			get
			{
				return this._FType;
			}
			set
			{
				if ((this._FType != value))
				{
					this.OnFTypeChanging(value);
					this.SendPropertyChanging();
					this._FType = value;
					this.SendPropertyChanged("FType");
					this.OnFTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FestivalType_Festival", Storage="_Festivals", ThisKey="ID", OtherKey="FType_ID")]
		public EntitySet<Festival> Festivals
		{
			get
			{
				return this._Festivals;
			}
			set
			{
				this._Festivals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Festivals(Festival entity)
		{
			this.SendPropertyChanging();
			entity.FestivalType = this;
		}
		
		private void detach_Festivals(Festival entity)
		{
			this.SendPropertyChanging();
			entity.FestivalType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Towns")]
	public partial class Town : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Festival> _Festivals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Town()
		{
			this._Festivals = new EntitySet<Festival>(new Action<Festival>(this.attach_Festivals), new Action<Festival>(this.detach_Festivals));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Town_Festival", Storage="_Festivals", ThisKey="ID", OtherKey="FestivalTown_ID")]
		public EntitySet<Festival> Festivals
		{
			get
			{
				return this._Festivals;
			}
			set
			{
				this._Festivals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Festivals(Festival entity)
		{
			this.SendPropertyChanging();
			entity.Town = this;
		}
		
		private void detach_Festivals(Festival entity)
		{
			this.SendPropertyChanging();
			entity.Town = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Festivals")]
	public partial class Festival : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FestivalId;
		
		private string _FestivalName;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private int _UserID;
		
		private int _FestivalCounty_ID;
		
		private int _FestivalTown_ID;
		
		private int _FType_ID;
		
		private string _FestivalLogo;
		
		private string _Description;
		
		private EntitySet<Event> _Events;
		
		private EntityRef<County> _County;
		
		private EntityRef<FestivalType> _FestivalType;
		
		private EntityRef<Town> _Town;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFestivalIdChanging(int value);
    partial void OnFestivalIdChanged();
    partial void OnFestivalNameChanging(string value);
    partial void OnFestivalNameChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnFestivalCounty_IDChanging(int value);
    partial void OnFestivalCounty_IDChanged();
    partial void OnFestivalTown_IDChanging(int value);
    partial void OnFestivalTown_IDChanged();
    partial void OnFType_IDChanging(int value);
    partial void OnFType_IDChanged();
    partial void OnFestivalLogoChanging(string value);
    partial void OnFestivalLogoChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Festival()
		{
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._County = default(EntityRef<County>);
			this._FestivalType = default(EntityRef<FestivalType>);
			this._Town = default(EntityRef<Town>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FestivalId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FestivalId
		{
			get
			{
				return this._FestivalId;
			}
			set
			{
				if ((this._FestivalId != value))
				{
					this.OnFestivalIdChanging(value);
					this.SendPropertyChanging();
					this._FestivalId = value;
					this.SendPropertyChanged("FestivalId");
					this.OnFestivalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FestivalName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FestivalName
		{
			get
			{
				return this._FestivalName;
			}
			set
			{
				if ((this._FestivalName != value))
				{
					this.OnFestivalNameChanging(value);
					this.SendPropertyChanging();
					this._FestivalName = value;
					this.SendPropertyChanged("FestivalName");
					this.OnFestivalNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FestivalCounty_ID", DbType="Int NOT NULL")]
		public int FestivalCounty_ID
		{
			get
			{
				return this._FestivalCounty_ID;
			}
			set
			{
				if ((this._FestivalCounty_ID != value))
				{
					if (this._County.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFestivalCounty_IDChanging(value);
					this.SendPropertyChanging();
					this._FestivalCounty_ID = value;
					this.SendPropertyChanged("FestivalCounty_ID");
					this.OnFestivalCounty_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FestivalTown_ID", DbType="Int NOT NULL")]
		public int FestivalTown_ID
		{
			get
			{
				return this._FestivalTown_ID;
			}
			set
			{
				if ((this._FestivalTown_ID != value))
				{
					if (this._Town.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFestivalTown_IDChanging(value);
					this.SendPropertyChanging();
					this._FestivalTown_ID = value;
					this.SendPropertyChanged("FestivalTown_ID");
					this.OnFestivalTown_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FType_ID", DbType="Int NOT NULL")]
		public int FType_ID
		{
			get
			{
				return this._FType_ID;
			}
			set
			{
				if ((this._FType_ID != value))
				{
					if (this._FestivalType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFType_IDChanging(value);
					this.SendPropertyChanging();
					this._FType_ID = value;
					this.SendPropertyChanged("FType_ID");
					this.OnFType_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FestivalLogo", DbType="NVarChar(MAX)")]
		public string FestivalLogo
		{
			get
			{
				return this._FestivalLogo;
			}
			set
			{
				if ((this._FestivalLogo != value))
				{
					this.OnFestivalLogoChanging(value);
					this.SendPropertyChanging();
					this._FestivalLogo = value;
					this.SendPropertyChanged("FestivalLogo");
					this.OnFestivalLogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Festival_Event", Storage="_Events", ThisKey="FestivalId", OtherKey="FestivalID")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="County_Festival", Storage="_County", ThisKey="FestivalCounty_ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public County County
		{
			get
			{
				return this._County.Entity;
			}
			set
			{
				County previousValue = this._County.Entity;
				if (((previousValue != value) 
							|| (this._County.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._County.Entity = null;
						previousValue.Festivals.Remove(this);
					}
					this._County.Entity = value;
					if ((value != null))
					{
						value.Festivals.Add(this);
						this._FestivalCounty_ID = value.ID;
					}
					else
					{
						this._FestivalCounty_ID = default(int);
					}
					this.SendPropertyChanged("County");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FestivalType_Festival", Storage="_FestivalType", ThisKey="FType_ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public FestivalType FestivalType
		{
			get
			{
				return this._FestivalType.Entity;
			}
			set
			{
				FestivalType previousValue = this._FestivalType.Entity;
				if (((previousValue != value) 
							|| (this._FestivalType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FestivalType.Entity = null;
						previousValue.Festivals.Remove(this);
					}
					this._FestivalType.Entity = value;
					if ((value != null))
					{
						value.Festivals.Add(this);
						this._FType_ID = value.ID;
					}
					else
					{
						this._FType_ID = default(int);
					}
					this.SendPropertyChanged("FestivalType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Town_Festival", Storage="_Town", ThisKey="FestivalTown_ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Town Town
		{
			get
			{
				return this._Town.Entity;
			}
			set
			{
				Town previousValue = this._Town.Entity;
				if (((previousValue != value) 
							|| (this._Town.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Town.Entity = null;
						previousValue.Festivals.Remove(this);
					}
					this._Town.Entity = value;
					if ((value != null))
					{
						value.Festivals.Add(this);
						this._FestivalTown_ID = value.ID;
					}
					else
					{
						this._FestivalTown_ID = default(int);
					}
					this.SendPropertyChanged("Town");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Festival = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Festival = null;
		}
	}
}
#pragma warning restore 1591
